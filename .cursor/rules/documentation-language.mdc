---
description: When writing documentation for users or developers, follow these guidelines.
alwaysApply: false
---

# Documentation Guidelines

When writing documentation for users or developers, follow these guidelines:

## Keep It Clear and Concise

- Avoid unnecessary words. Get straight to the point.
- **Example:** Instead of _"Your cluster will start as soon as possible,"_ say **"Launch instantly."**

## No Fluff or Marketing Speak

- Avoid phrases that sound overly promotional or vague.
- **Example:** Instead of _"Unlock the power of GPUs,"_ say **"Deploy an H100 GPU cluster."**

## Action-Oriented Language

- Focus on what the user needs to do, not generic descriptions.
- **Example:** Instead of _"You will need the SF Compute CLI and kubectl,"_ say **"Install @SF Compute CLI and @kubectl to access your cluster."**

## Consistent Formatting & Terminology

- Use the same terms across the app (e.g., **"Cluster Duration"** instead of sometimes saying **"Run Time"**).
- Use numerals for numbers (**"8 GPUs"**, not **"eight GPUs"**).

## Be Precise About Technical Details

- If something requires installation, say so.
- If a feature is unavailable, specify when itâ€™s coming or provide an alternative.

## No Redundant Information

- Don't repeat what the user already knows.
- **Example:** Instead of _"You are placing an order for a K8s cluster,"_ just tell them what they need to do next.

## Make Buttons and Actions Clear

- **"Place Order"** â†’ **"Confirm Order"** (if payment isnâ€™t immediate).
- **"Make Changes"** â†’ **"Edit Order"** (for clarity).
- Buttons should be title casing

## Use a Neutral, Professional Tone

- Avoid overly casual language unless intentional.
- **Example:** Instead of _"Almost there! Just install this tool,"_ say **"Install @SF Compute CLI and @kubectl to access your cluster."**

## Anticipate User Questions

- If something might be unclear, preemptively address it.
- **Example:** If persistent storage isnâ€™t available yet, say **"Persistent storage (Coming soon). Contact us for alternatives."**

## Ensure UI Copy Feels Integrated

- Help text shouldnâ€™t feel disconnected from the main UI.
- **Example:** If help text is too far from the relevant section, move it closer or embed it as a bullet point.

## Avoid Ambiguous Timeframes

- Be **precise** about when something will happen.
- **Example:** Instead of _"Your cluster will start shortly,"_ say **"Your cluster will be ready in under 60 seconds."**

## Use User-Centered Language

- Focus on what **the user** needs, not what the system does.
- **Example:** Instead of _"The system will allocate GPUs,"_ say **"Your cluster will have dedicated GPUs."**

## Don't Assume Prior Knowledge

- If using technical terms, **briefly explain or link to docs**.
- **Example:** Instead of _"Use InfiniBand networking,"_ say **"Use InfiniBand networking (high-speed data transfer between nodes)."**

## Default to Positive Language

- Frame messages in an **encouraging, problem-solving way**, even for errors.
- **Example:** Instead of _"Your order failed,"_ say **"Something went wrongâ€”try again or contact support."**

## Minimize Distractions in Critical Actions

- During checkout or confirmations, **keep the user focused** by avoiding extra links or unnecessary text.
- **Example:** Instead of:
  > "You're about to place an order for a cluster. Did you know we also offer persistent storage? Contact us for more info."
  > Use:
  > "Review your order details, then confirm your cluster setup."

## Write Error Messages That Guide Users

- Donâ€™t just state **what went wrongâ€”tell them how to fix it**.
- **Example:** Instead of _"Invalid API key,"_ say **"Your API key is incorrect or expired. Generate a new key in your account settings."**

## Keep Confirmation Messages Clear & Reassuring

- After an action, let users know **what happens next**.
- **Example:** Instead of _"Your order was placed,"_ say **"Your cluster is being deployed. Youâ€™ll receive access details shortly."**

## Keep Form Labels and Inputs Simple

- Labels should be **short and clear**.
- Placeholder text should **not repeat labels**.
- **Example:**
  - Bad _"Please enter your email address below:"_
  - Good **Label:** "Email" â†’ **Input Placeholder:** "<you@example.com>"

## Ensure All Call-to-Action (CTA) Buttons Are Specific

- Every button should **describe the action it triggers**.
- **Example:**

  - Bad "Submit"
  - Good "Deploy Cluster"

  ## Keep It Short, but Not Cryptic

- Use the **fewest words possible** without losing clarity.
- **Example:** Instead of _"Your cluster is now being provisioned and will be available shortly,"_ say **"Provisioning your clusterâ€¦"**
- Avoid unnecessary explanationsâ€”**the UI should guide users, not overwhelm them**.

## Prioritize Clarity Over Cleverness

- Avoid jargon unless your audience **already understands it**.
- **Example:** Instead of _"GPU nodes are booting up,"_ say **"Your GPUs are starting up."**
- Donâ€™t use technical terms **just to sound impressive**â€”only when theyâ€™re necessary.

## Show, Donâ€™t Tell

- If an action **is already obvious from the UI**, **donâ€™t repeat it**.
- **Example:** If thereâ€™s a "Deploy" button, **no need to add text saying "Click deploy to start your app."**
- Let **labels, buttons, and structure** guide the user instead of over-explaining.

## Use Sentence Case Everywhere

- Except for Buttons and Links.
- **Example:**
  - Bad _"Confirm Your Order"_
  - Good **"Confirm your order"**

## Error Messages Should Be Helpful, Not Alarming

- **Example:** Instead of _"Error 503: Something went wrong,"_ say **"Server is temporarily unavailable. Try again in a few minutes."**
- Keep it **calm and constructive**â€”users shouldnâ€™t feel like they broke something.

## CTA Buttons Should Be Actionable

- Buttons should **describe the action** clearly.
- **Example:**
  - Bad _"Submit"_
  - Good **"Deploy Cluster"**
  - Good **"Generate API Key"**
- Avoid vague labels like **"OK"** or **"Done"** if they can be more specific.

## Use Progressive Disclosure for Complex Information

- **Donâ€™t overload users with details upfront.**
- Show advanced settings **only when needed**.
- **Example:** Instead of displaying **all API settings** immediately, add a **"Show advanced settings"** toggle.

## Default to a Professional, Neutral Tone

- Avoid sounding too **robotic** or too **casual**.
- **Example:** Instead of _"Oops! Something went wrong ðŸ˜¢,"_ say **"We couldn't complete your request. Try again in a moment."**
- Keep personality **subtle**â€”Vercel and Linear add warmth through **clean design**, not excessive humor.

## Confirm Actions with Context

- **When users take an important action, confirm it.**
- **Example:** After deploying, instead of just closing the modal, show:
  > **"Your app has been deployed. View it live at @yourdomain.com."**
- This reassures users **something actually happened**.

## Avoid Passive Voice

- Make copy **direct and active**.
- **Example:**
  - Bad _"Your order has been placed."_
  - Good **"You placed your order."**
  - Bad _"Clusters are being deployed."_
  - Good **"Deploying your clusterâ€¦"**

## Keep the UI Copy Consistent

- If you call it **"Cluster Size"** in one place, **donâ€™t call it "GPU Count" elsewhere**.
- Consistency builds **trust and usability**.

## Assume the User Knows What Theyâ€™re Doing

- Donâ€™t over-explain concepts **developers already understand**.
- **Example:** Instead of _"A Kubernetes cluster is a set of machines thatâ€¦"_, just **link to docs**.
- Keep in-product copy **focused on action, not education**.

## If Itâ€™s Not Necessary, Remove It

- Every extra word **adds friction**.
- **Example:** Instead of _"Your cluster setup is now complete and you can start using it,"_ say **"Your cluster is ready."**
